<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>

  <groupId>win.topzx</groupId>
  <artifactId>ferp-demo</artifactId>
  <version>0.0.1</version>
  <name>ferp-demo</name>
  <url>http://maven.apache.org</url>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    	<java.version>1.8</java.version>
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
  </properties>
  <dependencies>
		<dependency>
  			<groupId>win.topzx</groupId>
			<artifactId>ferp-core</artifactId>
			<version>0.0.19</version>
  		</dependency>
  		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-nop</artifactId>
			<version>1.7.25</version>
			<scope>provided</scope>
		</dependency>
  </dependencies>
  
  <repositories>
        <repository>
            <id>GITHUB</id>
            <name>GITHUB</name>
            <url>https://topzxwin.github.io/ferp-core-repo/</url>
        </repository>
    </repositories>
  
   <build>
		<finalName>FERP</finalName>
		<!--
		    添加 includes 配置后，excludes 默认为所有文件 **/*.*，反之亦然
		    该规则在 maven-jar-plugin 等插件中同样适用
		-->
		<resources>
			<!-- 添加该配置是为了将 .sql 文件打入 jar 包 -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<!-- **/* 前缀用法，可以匹配所有路径 -->
					<include>**/*.sql</include>
					<include>**/*.class</include>
				</includes>
			</resource>
			
			<!--
				没有添加 resources 配置时，src/main/resources 目录是默认配置
			    一旦添加 resources 配置指向 src/main/java 目录时，原先的默认配置被取代，
			    所以需要添加如下配置将默认配置再添加进来，否则无法使用 src/main/resources
			    下的资源文件
			-->
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		
		
		
		<plugins>
		
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.6.1</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
					<!-- java8 保留参数名编译参数 -->
					<compilerArgument>-parameters</compilerArgument>
					<compilerArguments><verbose /></compilerArguments>
				</configuration>
			</plugin>
			
			<!--
				jar 包中的配置文件优先级高于 config 目录下的 "同名文件"
				因此，打包时需要排除掉 jar 包中来自 src/main/resources 目录的
				配置文件，否则部署时 config 目录中的同名配置文件不会生效
			 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<excludes>
						<!-- 
						     *.* 用法，可以匹配 jar 包根目录下所有文件
						     *.xxx 用法，可以匹配 jar 包根目录下特定扩展名文件，例如：*.xml
						     **/* 前缀用法，可以匹配所有路径，例如：**/*.txt
						-->
						<exclude>*.*</exclude>
						<exclude>sql/*.*</exclude>
					</excludes>
				</configuration>
			</plugin>
			
			<!-- 
				使用 mvn clean package 打包 
				更多配置可参考官方文档：http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html
	 		-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						
						<configuration>
							<!-- 打包生成的文件名 -->
							<finalName>${project.artifactId}</finalName>
							<!-- jar 等压缩文件在被打包进入 zip、tar.gz 时是否压缩，设置为 false 可加快打包速度 -->
							<recompressZippedFiles>false</recompressZippedFiles>
							<!-- 打包生成的文件是否要追加 package.xml 中定义的 id 值 -->
							<appendAssemblyId>true</appendAssemblyId>
							<!-- 指向打包描述文件 package.xml -->
							<descriptors>
								<descriptor>package.xml</descriptor>
							</descriptors>
							<!-- 打包结果输出的基础目录 -->
							<outputDirectory>${project.build.directory}/</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
		</plugins>
	</build>
</project>
